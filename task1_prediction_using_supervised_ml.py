# -*- coding: utf-8 -*-
"""Task1: Prediction Using Supervised ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bqW1pVSi0mXvj4Rlq_yo7TVE7gOMsc3t

# ***Name: Ahmed Nasser Ahmed Hassan***
**GRIP : *The Sparks Foundation***
> Data Science and Business Analytics Intern

---
**Task1: *Prediction Using Supervised ML***
> Linear Regression Classifier
---
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

studentScores = 'https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv'
dataset = pd.read_csv(studentScores)

print("Data imported successfully")

dataset.head(10)

dataset.plot(x='Hours', y='Scores', style='*')  
plt.title('Hours >-vs-< Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""**From the graph above, we can clearly see that there is a positive linear relation between the number of hours studied and percentage of score.**

### **Data Preprocessing**

Divide the data into "attributes" (inputs) and "labels" (outputs).
"""

X = dataset.iloc[:, :-1].values  
y = dataset.iloc[:, 1].values

"""Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

"""### **Training (Model Learning)**
Split data into training and testing sets, and now is finally the time to train the algorithm.
"""

regValue = LinearRegression().fit(X_train, y_train) 

print("Training complete.")

line = regValue.coef_*X+regValue.intercept_   # Plotting the regression line

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line, color='red');
plt.show()

"""### **Start Predicting**
Now that we have trained our algorithm, it's time to make some predictions.
"""

print(X_test)   # Testing data - In Hours
y_pred = regValue.predict(X_test)   # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

"""# Testing.. the Model"""

hours = 9.25
tst = (np.array([hours])).reshape(-1, 1)

newPrediction = regValue.predict(tst)

print('Testing Hours: {}'. format(hours))
print('Accuracy Score = {}'. format(newPrediction[0]), '%')

"""### **Evaluation of the model**"""

print('Absolute Mean Error =', metrics.mean_absolute_error(y_test, y_pred))